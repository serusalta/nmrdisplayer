{"version":3,"sources":["demo/views/Exam.jsx"],"names":["answers","JSON","parse","localStorage","getItem","file","a","fetch","checkStatus","response","json","data","ok","Error","status","statusText","styles","css","CopyButton","result","useState","isCopied","setCopyFlag","saveToClipboardHandler","useCallback","success","copyTextToClipboard","setTimeout","type","className","onClick","Exam","props","setData","setResult","title","baseURL","checkAnswer","answer","MolResponse","Molecule","fromMolfile","idCodeResponse","getIDCode","idCode","setItem","stringify","toSmiles","useEffect","loadData","then","d","_d","replace","molecules","molfile","molecule","currentAnswer","fromIDCode","toMolfile","mf","getMolecularFormula","formula","preferences","general","disableMultipletAnalysis","hideSetSumFromMolecule","panels","hidePeaksPanel","hideInformationPanel","hideRangesPanel","hideStructuresPanel","hideFiltersPanel","svgMenu","fragment","onChange","initialMolfile","style","color","fontSize"],"mappings":"2sDAWA,IAAIA,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,M,4CAEjE,WAAwBC,GAAxB,iBAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cAEEG,EADMC,EADR,iBAGqBA,EAASC,OAH9B,cAGQC,EAHR,yBAISA,GAJT,4C,sBAOA,SAASH,EAAYC,GACnB,IAAKA,EAASG,GACZ,MAAM,IAAIC,MAAJ,eAAkBJ,EAASK,OAA3B,cAAuCL,EAASM,aAExD,OAAON,EAGT,IAAMO,EAASC,YAAH,KA2ENC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACDC,oBAAS,GADR,mBAC1BC,EAD0B,KAChBC,EADgB,KAG3BC,EAAyBC,uBAAY,WACzC,IAAMC,EAAUC,YAAoBP,GACpCG,EAAYG,GACZE,YAAW,WACTL,GAAY,KACX,OACF,CAACH,IAEJ,OACE,sBACES,KAAK,SACLC,UAAU,cACVC,QAASP,GAERF,EAAW,YAAC,IAAD,MAAc,YAAC,IAAD,QAKjB,SAASU,EAAKC,GAAQ,IAAD,EACVZ,qBADU,mBAC3BT,EAD2B,KACrBsB,EADqB,OAENb,mBAAS,MAFH,mBAE3BD,EAF2B,KAEnBe,EAFmB,KAG1B7B,EAAyB2B,EAAzB3B,KAAM8B,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,QAEfC,EAAcb,uBAClB,SAACf,GACC,GAAIE,EAAK2B,OAAQ,CACf,IAAMC,EAAcC,WAASC,YAAYhC,GACnCiC,EAAiBH,EAAYI,YACnC3C,EAAQW,EAAK2B,OAAOM,QAAUF,EAC9BvC,aAAa0C,QAAQ,eAAgB5C,KAAK6C,UAAU9C,IACpDkC,EAAUK,EAAYQ,eAG1B,CAACpC,IA6BH,OA1BAqC,qBAAU,WACJ3C,E,2CACF4C,CAAS5C,GAAM6C,MAAK,SAACC,GACnB,IAAMC,EAAKnD,KAAKC,MAAMD,KAAK6C,UAAUK,GAAGE,QAAQ,UAAWjB,IAE3D,GAAIgB,GAAMA,EAAGE,WAAaF,EAAGE,UAAU,IAAMF,EAAGE,UAAU,GAAGC,QAAS,CACpE,IAAMC,EAAWhB,WAASC,YAAYW,EAAGE,UAAU,GAAGC,SAChDX,EAASY,EAASb,YACpBc,EAAgBzD,EAAQ4C,GAExBa,IACFA,EAAgBjB,WAASkB,WAAWD,GAAeE,aAErDP,EAAGd,OAAS,CACVM,SACAa,gBACAG,GAAIJ,EAASK,sBAAsBC,SAErC7B,EAAQmB,OAIZnB,EAAQ,MAET,CAACG,EAAS/B,EAAM2B,IAGjB,mBAAKf,IAAKD,GACR,kBAAIa,UAAU,SAAd,+FAGA,iBAAGA,UAAU,QAAQM,GACrB,mBAAKN,UAAU,iBACb,mBAAKA,UAAU,gBACb,YAAC,IAAD,CACElB,KAAMA,EACNoD,YAAa,CACXC,QAAS,CACPC,0BAA0B,EAC1BC,wBAAwB,GAE1BC,OAAQ,CACNC,gBAAgB,EAChBC,sBAAsB,EACtBC,iBAAiB,EACjBC,qBAAqB,EACrBC,kBAAkB,OAK1B,mBAAK3C,UAAU,mBACb,mBAAKA,UAAU,oBACb,YAAC,IAAD,CACE4C,SAAS,EACTC,UAAU,EACVC,SAAUtC,EACVuC,eAAgBjE,GAAQA,EAAK2B,QAAU3B,EAAK2B,OAAOmB,iBAGvD,mBAAK5B,UAAU,wBACb,mBAAKA,UAAU,MACb,YAAC,IAAD,CACEgD,MAAO,CAAEC,MAAO,OAAQC,SAAU,IAClCnB,GAAIjD,GAAQA,EAAK2B,QAAU3B,EAAK2B,OAAOsB,MAG3C,mBAAK/B,UAAU,oBACb,YAACX,EAAD,CAAYC,OAAQA,IACpB,mBAAKU,UAAU,UAAUV","file":"static/js/3.79fe403b.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { Molecule } from 'openchemlib/full';\nimport { useState, useEffect, useCallback } from 'react';\nimport { FaRegCopy, FaCheck } from 'react-icons/fa';\nimport { MF } from 'react-mf';\nimport { StructureEditor } from 'react-ocl/full';\n\nimport NMRDisplayer from '../../component/NMRDisplayer.jsx';\nimport { copyTextToClipboard } from '../../component/utility/Export.js';\n\nlet answers = JSON.parse(localStorage.getItem('nmrium-exams') || '{}');\n\nasync function loadData(file) {\n  const response = await fetch(file);\n  checkStatus(response);\n  const data = await response.json();\n  return data;\n}\n\nfunction checkStatus(response) {\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n  }\n  return response;\n}\n\nconst styles = css`\n   {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    margin-left: 30px;\n\n    .mainContainer {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n    .nmrContainer {\n      height: 100%;\n    }\n\n    .bottomContainer {\n      display: flex;\n    }\n\n    .bottomRightContainer {\n      width: 50%;\n      display: flex;\n      height: 100%;\n      flex-direction: column;\n    }\n    .mf {\n      height: 20%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: white;\n      border: 1px dashed gray;\n    }\n\n    .result-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 80%;\n      position: relative;\n    }\n\n    .result {\n      width: 50%;\n      height: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 16px;\n      font-weight: bold;\n    }\n\n    .copy-button {\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      width: 50px;\n      height: 40px;\n      outline: none;\n      border: none;\n      background-color: white;\n      border-radius: 10px;\n    }\n    .copy-button:hover {\n      background-color: green;\n      color: white;\n    }\n    .structure-editor {\n      background-color: white;\n      flex: 1;\n    }\n  }\n`;\n\nconst CopyButton = ({ result }) => {\n  const [isCopied, setCopyFlag] = useState(false);\n\n  const saveToClipboardHandler = useCallback(() => {\n    const success = copyTextToClipboard(result);\n    setCopyFlag(success);\n    setTimeout(() => {\n      setCopyFlag(false);\n    }, 1000);\n  }, [result]);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"copy-button\"\n      onClick={saveToClipboardHandler}\n    >\n      {isCopied ? <FaCheck /> : <FaRegCopy />}\n    </button>\n  );\n};\n\nexport default function Exam(props) {\n  const [data, setData] = useState();\n  const [result, setResult] = useState(null);\n  const { file, title, baseURL } = props;\n\n  const checkAnswer = useCallback(\n    (response) => {\n      if (data.answer) {\n        const MolResponse = Molecule.fromMolfile(response);\n        const idCodeResponse = MolResponse.getIDCode();\n        answers[data.answer.idCode] = idCodeResponse;\n        localStorage.setItem('nmrium-exams', JSON.stringify(answers));\n        setResult(MolResponse.toSmiles());\n      }\n    },\n    [data],\n  );\n\n  useEffect(() => {\n    if (file) {\n      loadData(file).then((d) => {\n        const _d = JSON.parse(JSON.stringify(d).replace(/\\.\\/+?/g, baseURL));\n\n        if (_d && _d.molecules && _d.molecules[0] && _d.molecules[0].molfile) {\n          const molecule = Molecule.fromMolfile(_d.molecules[0].molfile);\n          const idCode = molecule.getIDCode();\n          let currentAnswer = answers[idCode];\n\n          if (currentAnswer) {\n            currentAnswer = Molecule.fromIDCode(currentAnswer).toMolfile();\n          }\n          _d.answer = {\n            idCode,\n            currentAnswer,\n            mf: molecule.getMolecularFormula().formula,\n          };\n          setData(_d);\n        }\n      });\n    } else {\n      setData({});\n    }\n  }, [baseURL, file, props]);\n\n  return (\n    <div css={styles}>\n      <h5 className=\"title\">\n        Ex√°men: Determine la estructura del compuesto desconocido a partir de su espectro de RMN\n      </h5>\n      <p className=\"name\">{title}</p>\n      <div className=\"mainContainer\">\n        <div className=\"nmrContainer\">\n          <NMRDisplayer\n            data={data}\n            preferences={{\n              general: {\n                disableMultipletAnalysis: true,\n                hideSetSumFromMolecule: true,\n              },\n              panels: {\n                hidePeaksPanel: true,\n                hideInformationPanel: true,\n                hideRangesPanel: true,\n                hideStructuresPanel: true,\n                hideFiltersPanel: true,\n              },\n            }}\n          />\n        </div>\n        <div className=\"bottomContainer\">\n          <div className=\"structure-editor\">\n            <StructureEditor\n              svgMenu={true}\n              fragment={false}\n              onChange={checkAnswer}\n              initialMolfile={data && data.answer && data.answer.currentAnswer}\n            />\n          </div>\n          <div className=\"bottomRightContainer\">\n            <div className=\"mf\">\n              <MF\n                style={{ color: 'navy', fontSize: 30 }}\n                mf={data && data.answer && data.answer.mf}\n              />\n            </div>\n            <div className=\"result-container\">\n              <CopyButton result={result} />\n              <div className=\"result\">{result}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}