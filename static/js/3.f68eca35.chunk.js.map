{"version":3,"sources":["demo/views/Exercise.jsx"],"names":["answers","JSON","parse","localStorage","getItem","file","a","fetch","checkStatus","response","json","data","ok","Error","status","statusText","styles","mainContainer","display","flexDirection","height","nmrContainer","bottomContainer","bottomRightContainer","width","MF","alignItems","justifyContent","backgroundColor","border","resultContainer","result","fontSize","fontWeight","StructureEditor","flex","Exercise","props","useState","setData","resultFlag","setResultFlag","title","baseURL","checkAnswer","useCallback","answer","idCodeResponse","Molecule","fromMolfile","getIDCode","idCode","setItem","stringify","useEffect","loadData","then","d","_d","replace","molecules","molfile","molecule","currentAnswer","fromIDCode","toMolfile","mf","getMolecularFormula","formula","style","marginLeft","className","preferences","general","disableMultipletAnalysis","hideSetSumFromMolecule","panels","hidePeaksPanel","hideInformationPanel","hideRangesPanel","hideStructuresPanel","hideFiltersPanel","svgMenu","fragment","onChange","initialMolfile","color"],"mappings":"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","file":"static/js/3.f68eca35.chunk.js","sourcesContent":["import { Molecule } from 'openchemlib/full';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { MF } from 'react-mf';\nimport { StructureEditor } from 'react-ocl/full';\n\nimport NMRDisplayer from '../../component/NMRDisplayer.jsx';\n\nlet answers = JSON.parse(localStorage.getItem('nmrium-exercises') || '{}');\n\nasync function loadData(file) {\n  const response = await fetch(file);\n  checkStatus(response);\n  const data = await response.json();\n  return data;\n}\n\nfunction checkStatus(response) {\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n  }\n  return response;\n}\n\nconst styles = {\n  mainContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  },\n  nmrContainer: {\n    height: '100%',\n  },\n\n  bottomContainer: {\n    display: 'flex',\n  },\n  bottomRightContainer: {\n    width: '50%',\n    display: 'flex',\n    height: '80%',\n    flexDirection: 'column',\n  },\n  MF: {\n    height: '30%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    border: '1px dashed gray',\n  },\n  resultContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '80%',\n  },\n\n  result: {\n    width: '50%',\n    height: '50%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: '16px',\n    fontWeight: 'bold',\n  },\n\n  StructureEditor: {\n    backgroundColor: 'white',\n    flex: '1',\n  },\n};\n\nexport default function Exercise(props) {\n  const [data, setData] = useState();\n  const [resultFlag, setResultFlag] = useState(null);\n  const { file, title, baseURL } = props;\n\n  const checkAnswer = useCallback(\n    (response) => {\n      if (data.answer) {\n        const MolResponse = Molecule.fromMolfile(response);\n        const idCodeResponse = MolResponse.getIDCode();\n        answers[data.answer.idCode] = idCodeResponse;\n        localStorage.setItem('nmrium-exercises', JSON.stringify(answers));\n        // console.log({ idCodeResponse, idCodeResult });\n        if (data.answer.idCode === idCodeResponse) {\n          // correct answer\n          setResultFlag(true);\n        } else {\n          setResultFlag(false);\n          // wrong answer\n        }\n      }\n    },\n    [data],\n  );\n\n  useEffect(() => {\n    if (file) {\n      loadData(file).then((d) => {\n        const _d = JSON.parse(JSON.stringify(d).replace(/\\.\\/+?/g, baseURL));\n\n        if (_d && _d.molecules && _d.molecules[0] && _d.molecules[0].molfile) {\n          const molecule = Molecule.fromMolfile(_d.molecules[0].molfile);\n          const idCode = molecule.getIDCode();\n          let currentAnswer = answers[idCode];\n\n          if (currentAnswer) {\n            currentAnswer = Molecule.fromIDCode(currentAnswer).toMolfile();\n          }\n          _d.answer = {\n            idCode,\n            currentAnswer,\n            mf: molecule.getMolecularFormula().formula,\n          };\n          setData(_d);\n        }\n      });\n    } else {\n      setData({});\n    }\n  }, [baseURL, file, props]);\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        marginLeft: 30,\n      }}\n    >\n      <h5 className=\"title\">\n        Determine la estructura del compuesto desconocido a partir de su espectro de RMN\n      </h5>\n      <p className=\"name\">{title}</p>\n      <div style={styles.mainContainer}>\n        <div style={styles.nmrContainer}>\n          <NMRDisplayer\n            data={data}\n            preferences={{\n              general: {\n                disableMultipletAnalysis: true,\n                hideSetSumFromMolecule: true,\n              },\n              panels: {\n                hidePeaksPanel: true,\n                hideInformationPanel: true,\n                hideRangesPanel: true,\n                hideStructuresPanel: true,\n                hideFiltersPanel: true,\n              },\n            }}\n          />\n        </div>\n        <div style={styles.bottomContainer}>\n          <div style={styles.StructureEditor}>\n            <StructureEditor\n              svgMenu={true}\n              fragment={false}\n              onChange={checkAnswer}\n              initialMolfile={data && data.answer && data.answer.currentAnswer}\n            />\n          </div>\n          <div style={styles.bottomRightContainer}>\n            <div style={styles.MF}>\n              <MF\n                style={{ color: 'navy', fontSize: 30 }}\n                mf={data && data.answer && data.answer.mf}\n              />\n            </div>\n            <div\n              style={{\n                ...styles.resultContainer,\n              }}\n            >\n              <div\n                style={{\n                  ...styles.result,\n                  backgroundColor:\n                    resultFlag == null ? 'white' : resultFlag ? 'green' : 'red',\n                  color: resultFlag == null ? 'black' : 'white',\n                }}\n              >\n                {resultFlag == null ? (\n                  <p>Resultado</p>\n                ) : resultFlag === true ? (\n                  <p>Molecula correcta!</p>\n                ) : (\n                  <p>Molecula incorrecta!!</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}